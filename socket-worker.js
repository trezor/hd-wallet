(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function after(o,n,t){function r(o,e){if(r.count<=0)throw new Error("after called too many times");--r.count,o?(u=!0,n(o),n=t):0!==r.count||u||n(null,e)}var u=!1;return t=t||noop,r.count=o,0===o?n():r}function noop(){}module.exports=after;

},{}],2:[function(require,module,exports){
module.exports=function(r,e,n){var t=r.byteLength;if(e=e||0,n=n||t,r.slice)return r.slice(e,n);if(e<0&&(e+=t),n<0&&(n+=t),n>t&&(n=t),e>=t||e>=n||0===t)return new ArrayBuffer(0);for(var f=new Uint8Array(r),i=new Uint8Array(n-e),u=e,a=0;u<n;u++,a++)i[a]=f[u];return i.buffer};

},{}],3:[function(require,module,exports){
function Backoff(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}module.exports=Backoff,Backoff.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var o=Math.random(),i=Math.floor(o*this.jitter*t);t=0==(1&Math.floor(10*o))?t-i:t+i}return 0|Math.min(t,this.max)},Backoff.prototype.reset=function(){this.attempts=0},Backoff.prototype.setMin=function(t){this.ms=t},Backoff.prototype.setMax=function(t){this.max=t},Backoff.prototype.setJitter=function(t){this.jitter=t};

},{}],4:[function(require,module,exports){
!function(){"use strict";for(var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=new Uint8Array(256),t=0;t<r.length;t++)e[r.charCodeAt(t)]=t;exports.encode=function(e){var t,n=new Uint8Array(e),o=n.length,a="";for(t=0;t<o;t+=3)a+=r[n[t]>>2],a+=r[(3&n[t])<<4|n[t+1]>>4],a+=r[(15&n[t+1])<<2|n[t+2]>>6],a+=r[63&n[t+2]];return o%3==2?a=a.substring(0,a.length-1)+"=":o%3==1&&(a=a.substring(0,a.length-2)+"=="),a},exports.decode=function(r){var t,n,o,a,h,c=.75*r.length,g=r.length,i=0;"="===r[r.length-1]&&(c--,"="===r[r.length-2]&&c--);var u=new ArrayBuffer(c),A=new Uint8Array(u);for(t=0;t<g;t+=4)n=e[r.charCodeAt(t)],o=e[r.charCodeAt(t+1)],a=e[r.charCodeAt(t+2)],h=e[r.charCodeAt(t+3)],A[i++]=n<<2|o>>4,A[i++]=(15&o)<<4|a>>2,A[i++]=(3&a)<<6|63&h;return u}}();

},{}],5:[function(require,module,exports){
(function (global){
function mapArrayBufferViews(r){for(var e=0;e<r.length;e++){var o=r[e];if(o.buffer instanceof ArrayBuffer){var t=o.buffer;if(o.byteLength!==t.byteLength){var l=new Uint8Array(o.byteLength);l.set(new Uint8Array(t,o.byteOffset,o.byteLength)),t=l.buffer}r[e]=t}}}function BlobBuilderConstructor(r,e){e=e||{};var o=new BlobBuilder;mapArrayBufferViews(r);for(var t=0;t<r.length;t++)o.append(r[t]);return e.type?o.getBlob(e.type):o.getBlob()}function BlobConstructor(r,e){return mapArrayBufferViews(r),new Blob(r,e||{})}var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder,blobSupported=function(){try{return 2===new Blob(["hi"]).size}catch(r){return!1}}(),blobSupportsArrayBufferView=blobSupported&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(r){return!1}}(),blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;module.exports=function(){return blobSupported?blobSupportsArrayBufferView?global.Blob:BlobConstructor:blobBuilderSupported?BlobBuilderConstructor:void 0}();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
var slice=[].slice;module.exports=function(n,r){if("string"==typeof r&&(r=n[r]),"function"!=typeof r)throw new Error("bind() requires a function");var e=slice.call(arguments,2);return function(){return r.apply(n,e.concat(slice.call(arguments)))}};

},{}],8:[function(require,module,exports){
function Emitter(t){if(t)return mixin(t)}function mixin(t){for(var e in Emitter.prototype)t[e]=Emitter.prototype[e];return t}"undefined"!=typeof module&&(module.exports=Emitter),Emitter.prototype.on=Emitter.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Emitter.prototype.once=function(t,e){function i(){this.off(t,i),e.apply(this,arguments)}return i.fn=e,this.on(t,i),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r,s=0;s<i.length;s++)if((r=i[s])===e||r.fn===e){i.splice(s,1);break}return this},Emitter.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),i=this._callbacks["$"+t];if(i){i=i.slice(0);for(var r=0,s=i.length;r<s;++r)i[r].apply(this,e)}return this},Emitter.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Emitter.prototype.hasListeners=function(t){return!!this.listeners(t).length};

},{}],9:[function(require,module,exports){
module.exports=function(o,t){var p=function(){};p.prototype=t.prototype,o.prototype=new p,o.prototype.constructor=o};

},{}],10:[function(require,module,exports){
(function (process){
function useColors(){return"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function formatArgs(){var e=arguments,o=this.useColors;if(e[0]=(o?"%c":"")+this.namespace+(o?" %c":" ")+e[0]+(o?"%c ":" ")+"+"+exports.humanize(this.diff),!o)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var t=0,s=0;return e[0].replace(/%[a-z%]/g,function(e){"%%"!==e&&(t++,"%c"===e&&(s=t))}),e.splice(s,0,r),e}function log(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(e){try{null==e?exports.storage.removeItem("debug"):exports.storage.debug=e}catch(e){}}function load(){try{return exports.storage.debug}catch(e){}if("undefined"!=typeof process&&"env"in process)return process.env.DEBUG}function localstorage(){try{return window.localStorage}catch(e){}}exports=module.exports=require("./debug"),exports.log=log,exports.formatArgs=formatArgs,exports.save=save,exports.load=load,exports.useColors=useColors,exports.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:localstorage(),exports.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},exports.enable(load());

}).call(this,require('_process'))

},{"./debug":11,"_process":33}],11:[function(require,module,exports){
function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(e){function r(){}function o(){var e=o,r=+new Date,s=r-(prevTime||r);e.diff=s,e.prev=prevTime,e.curr=r,prevTime=r,null==e.useColors&&(e.useColors=exports.useColors()),null==e.color&&e.useColors&&(e.color=selectColor());for(var t=new Array(arguments.length),n=0;n<t.length;n++)t[n]=arguments[n];t[0]=exports.coerce(t[0]),"string"!=typeof t[0]&&(t=["%o"].concat(t));var p=0;t[0]=t[0].replace(/%([a-z%])/g,function(r,o){if("%%"===r)return r;p++;var s=exports.formatters[o];if("function"==typeof s){var n=t[p];r=s.call(e,n),t.splice(p,1),p--}return r}),t=exports.formatArgs.apply(e,t),(o.log||exports.log||console.log.bind(console)).apply(e,t)}r.enabled=!1,o.enabled=!0;var s=exports.enabled(e)?o:r;return s.namespace=e,s}function enable(e){exports.save(e);for(var r=(e||"").split(/[\s,]+/),o=r.length,s=0;s<o;s++)r[s]&&(e=r[s].replace(/[\\^$+?.()|[\]{}]/g,"\\$&").replace(/\*/g,".*?"),"-"===e[0]?exports.skips.push(new RegExp("^"+e.substr(1)+"$")):exports.names.push(new RegExp("^"+e+"$")))}function disable(){exports.enable("")}function enabled(e){var r,o;for(r=0,o=exports.skips.length;r<o;r++)if(exports.skips[r].test(e))return!1;for(r=0,o=exports.names.length;r<o;r++)if(exports.names[r].test(e))return!0;return!1}function coerce(e){return e instanceof Error?e.stack||e.message:e}exports=module.exports=debug.debug=debug,exports.coerce=coerce,exports.disable=disable,exports.enable=enable,exports.enabled=enabled,exports.humanize=require("ms"),exports.names=[],exports.skips=[],exports.formatters={};var prevColor=0,prevTime;

},{"ms":29}],12:[function(require,module,exports){
module.exports=require("./lib/index");

},{"./lib/index":13}],13:[function(require,module,exports){
module.exports=require("./socket"),module.exports.parser=require("engine.io-parser");

},{"./socket":14,"engine.io-parser":22}],14:[function(require,module,exports){
(function (global){
function Socket(e,t){if(!(this instanceof Socket))return new Socket(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=parseuri(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=parseuri(t.host).host),this.secure=null!=t.secure?t.secure:global.location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||(global.location?location.hostname:"localhost"),this.port=t.port||(global.location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=parseqs.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||null,this.key=t.key||null,this.passphrase=t.passphrase||null,this.cert=t.cert||null,this.ca=t.ca||null,this.ciphers=t.ciphers||null,this.rejectUnauthorized=void 0===t.rejectUnauthorized?null:t.rejectUnauthorized,this.forceNode=!!t.forceNode;var r="object"==typeof global&&global;r.global===r&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function clone(e){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}var transports=require("./transports/index"),Emitter=require("component-emitter"),debug=require("debug")("engine.io-client:socket"),index=require("indexof"),parser=require("engine.io-parser"),parseuri=require("parseuri"),parsejson=require("parsejson"),parseqs=require("parseqs");module.exports=Socket,Socket.priorWebsocketSuccess=!1,Emitter(Socket.prototype),Socket.protocol=parser.protocol,Socket.Socket=Socket,Socket.Transport=require("./transport"),Socket.transports=require("./transports/index"),Socket.parser=require("engine.io-parser"),Socket.prototype.createTransport=function(e){debug('creating transport "%s"',e);var t=clone(this.query);return t.EIO=parser.protocol,t.transport=e,this.id&&(t.sid=this.id),new transports[e]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:t,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders,forceNode:this.forceNode,localAddress:this.localAddress})},Socket.prototype.open=function(){var e;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},Socket.prototype.setTransport=function(e){debug("setting transport %s",e.name);var t=this;this.transport&&(debug("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},Socket.prototype.probe=function(e){function t(){if(h.onlyBinaryUpgrades){var t=!this.supportsBinary&&h.transport.supportsBinary;c=c||t}c||(debug('probe transport "%s" opened',e),p.send([{type:"ping",data:"probe"}]),p.once("packet",function(t){if(!c)if("pong"===t.type&&"probe"===t.data){if(debug('probe transport "%s" pong',e),h.upgrading=!0,h.emit("upgrading",p),!p)return;Socket.priorWebsocketSuccess="websocket"===p.name,debug('pausing current transport "%s"',h.transport.name),h.transport.pause(function(){c||"closed"!==h.readyState&&(debug("changing transport and sending upgrade packet"),a(),h.setTransport(p),p.send([{type:"upgrade"}]),h.emit("upgrade",p),p=null,h.upgrading=!1,h.flush())})}else{debug('probe transport "%s" failed',e);var r=new Error("probe error");r.transport=p.name,h.emit("upgradeError",r)}}))}function r(){c||(c=!0,a(),p.close(),p=null)}function s(t){var s=new Error("probe error: "+t);s.transport=p.name,r(),debug('probe transport "%s" failed because of error: %s',e,t),h.emit("upgradeError",s)}function o(){s("transport closed")}function i(){s("socket closed")}function n(e){p&&e.name!==p.name&&(debug('"%s" works - aborting "%s"',e.name,p.name),r())}function a(){p.removeListener("open",t),p.removeListener("error",s),p.removeListener("close",o),h.removeListener("close",i),h.removeListener("upgrading",n)}debug('probing transport "%s"',e);var p=this.createTransport(e,{probe:1}),c=!1,h=this;Socket.priorWebsocketSuccess=!1,p.once("open",t),p.once("error",s),p.once("close",o),this.once("close",i),this.once("upgrading",n),p.open()},Socket.prototype.onOpen=function(){if(debug("socket open"),this.readyState="open",Socket.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){debug("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},Socket.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(debug('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(parsejson(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else debug('packet received with socket readyState "%s"',this.readyState)},Socket.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},Socket.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},Socket.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){debug("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},Socket.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},Socket.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},Socket.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(debug("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},Socket.prototype.write=Socket.prototype.send=function(e,t,r){return this.sendPacket("message",e,t,r),this},Socket.prototype.sendPacket=function(e,t,r,s){if("function"==typeof t&&(s=t,t=void 0),"function"==typeof r&&(s=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){r=r||{},r.compress=!1!==r.compress;var o={type:e,data:t,options:r};this.emit("packetCreate",o),this.writeBuffer.push(o),s&&this.once("flush",s),this.flush()}},Socket.prototype.close=function(){function e(){s.onClose("forced close"),debug("socket closing - telling transport to close"),s.transport.close()}function t(){s.removeListener("upgrade",t),s.removeListener("upgradeError",t),e()}function r(){s.once("upgrade",t),s.once("upgradeError",t)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var s=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():e()}):this.upgrading?r():e()}return this},Socket.prototype.onError=function(e){debug("socket error %j",e),Socket.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},Socket.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){debug('socket close with reason: "%s"',e);var r=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),r.writeBuffer=[],r.prevBufferLen=0}},Socket.prototype.filterUpgrades=function(e){for(var t=[],r=0,s=e.length;r<s;r++)~index(this.transports,e[r])&&t.push(e[r]);return t};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./transport":15,"./transports/index":16,"component-emitter":8,"debug":10,"engine.io-parser":22,"indexof":26,"parsejson":30,"parseqs":31,"parseuri":32}],15:[function(require,module,exports){
function Transport(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}var parser=require("engine.io-parser"),Emitter=require("component-emitter");module.exports=Transport,Emitter(Transport.prototype),Transport.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},Transport.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},Transport.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},Transport.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},Transport.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},Transport.prototype.onData=function(t){var e=parser.decodePacket(t,this.socket.binaryType);this.onPacket(e)},Transport.prototype.onPacket=function(t){this.emit("packet",t)},Transport.prototype.onClose=function(){this.readyState="closed",this.emit("close")};

},{"component-emitter":8,"engine.io-parser":22}],16:[function(require,module,exports){
(function (global){
function polling(e){var o=!1,t=!1,r=!1!==e.jsonp;if(global.location){var n="https:"===location.protocol,i=location.port;i||(i=n?443:80),o=e.hostname!==location.hostname||i!==e.port,t=e.secure!==n}if(e.xdomain=o,e.xscheme=t,"open"in new XMLHttpRequest(e)&&!e.forceJSONP)return new XHR(e);if(!r)throw new Error("JSONP disabled");return new JSONP(e)}var XMLHttpRequest=require("xmlhttprequest-ssl"),XHR=require("./polling-xhr"),JSONP=require("./polling-jsonp"),websocket=require("./websocket");exports.polling=polling,exports.websocket=websocket;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling-jsonp":17,"./polling-xhr":18,"./websocket":20,"xmlhttprequest-ssl":21}],17:[function(require,module,exports){
(function (global){
function empty(){}function JSONPPolling(e){Polling.call(this,e),this.query=this.query||{},callbacks||(global.___eio||(global.___eio=[]),callbacks=global.___eio),this.index=callbacks.length;var t=this;callbacks.push(function(e){t.onData(e)}),this.query.j=this.index,global.document&&global.addEventListener&&global.addEventListener("beforeunload",function(){t.script&&(t.script.onerror=empty)},!1)}var Polling=require("./polling"),inherit=require("component-inherit");module.exports=JSONPPolling;var rNewline=/\n/g,rEscapedNewline=/\\n/g,callbacks;inherit(JSONPPolling,Polling),JSONPPolling.prototype.supportsBinary=!1,JSONPPolling.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),Polling.prototype.doClose.call(this)},JSONPPolling.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var i=document.getElementsByTagName("script")[0];i?i.parentNode.insertBefore(t,i):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},JSONPPolling.prototype.doWrite=function(e,t){function i(){r(),t()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(e){o.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';n=document.createElement(e)}catch(e){n=document.createElement("iframe"),n.name=o.iframeId,n.src="javascript:0"}n.id=o.iframeId,o.form.appendChild(n),o.iframe=n}var o=this;if(!this.form){var n,a=document.createElement("form"),l=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;a.className="socketio",a.style.position="absolute",a.style.top="-1000px",a.style.left="-1000px",a.target=s,a.method="POST",a.setAttribute("accept-charset","utf-8"),l.name="d",a.appendChild(l),document.body.appendChild(a),this.form=a,this.area=l}this.form.action=this.uri(),r(),e=e.replace(rEscapedNewline,"\\\n"),this.area.value=e.replace(rNewline,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&i()}:this.iframe.onload=i};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling":19,"component-inherit":9}],18:[function(require,module,exports){
(function (global){
function empty(){}function XHR(t){if(Polling.call(this,t),this.requestTimeout=t.requestTimeout,global.location){var e="https:"===location.protocol,s=location.port;s||(s=e?443:80),this.xd=t.hostname!==global.location.hostname||s!==t.port,this.xs=t.secure!==e}else this.extraHeaders=t.extraHeaders}function Request(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}function unloadHandler(){for(var t in Request.requests)Request.requests.hasOwnProperty(t)&&Request.requests[t].abort()}var XMLHttpRequest=require("xmlhttprequest-ssl"),Polling=require("./polling"),Emitter=require("component-emitter"),inherit=require("component-inherit"),debug=require("debug")("engine.io-client:polling-xhr");module.exports=XHR,module.exports.Request=Request,inherit(XHR,Polling),XHR.prototype.supportsBinary=!0,XHR.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new Request(t)},XHR.prototype.doWrite=function(t,e){var s="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:s}),i=this;r.on("success",e),r.on("error",function(t){i.onError("xhr post error",t)}),this.sendXhr=r},XHR.prototype.doPoll=function(){debug("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},Emitter(Request.prototype),Request.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new XMLHttpRequest(t),s=this;try{debug("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders){e.setDisableHeaderCheck(!0);for(var r in this.extraHeaders)this.extraHeaders.hasOwnProperty(r)&&e.setRequestHeader(r,this.extraHeaders[r])}}catch(t){}if(this.supportsBinary&&(e.responseType="arraybuffer"),"POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=!0),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){s.onLoad()},e.onerror=function(){s.onError(e.responseText)}):e.onreadystatechange=function(){4===e.readyState&&(200===e.status||1223===e.status?s.onLoad():setTimeout(function(){s.onError(e.status)},0))},debug("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){s.onError(t)},0)}global.document&&(this.index=Request.requestsCount++,Request.requests[this.index]=this)},Request.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},Request.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},Request.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},Request.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=empty:this.xhr.onreadystatechange=empty,t)try{this.xhr.abort()}catch(t){}global.document&&delete Request.requests[this.index],this.xhr=null}},Request.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type").split(";")[0]}catch(t){}if("application/octet-stream"===e)t=this.xhr.response||this.xhr.responseText;else if(this.supportsBinary)try{t=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){for(var s=new Uint8Array(this.xhr.response),r=[],i=0,o=s.length;i<o;i++)r.push(s[i]);t=String.fromCharCode.apply(null,r)}else t=this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},Request.prototype.hasXDR=function(){return void 0!==global.XDomainRequest&&!this.xs&&this.enablesXDR},Request.prototype.abort=function(){this.cleanup()},Request.requestsCount=0,Request.requests={},global.document&&(global.attachEvent?global.attachEvent("onunload",unloadHandler):global.addEventListener&&global.addEventListener("beforeunload",unloadHandler,!1));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling":19,"component-emitter":8,"component-inherit":9,"debug":10,"xmlhttprequest-ssl":21}],19:[function(require,module,exports){
function Polling(t){var e=t&&t.forceBase64;hasXHR2&&!e||(this.supportsBinary=!1),Transport.call(this,t)}var Transport=require("../transport"),parseqs=require("parseqs"),parser=require("engine.io-parser"),inherit=require("component-inherit"),yeast=require("yeast"),debug=require("debug")("engine.io-client:polling");module.exports=Polling;var hasXHR2=function(){return null!=new(require("xmlhttprequest-ssl"))({xdomain:!1}).responseType}();inherit(Polling,Transport),Polling.prototype.name="polling",Polling.prototype.doOpen=function(){this.poll()},Polling.prototype.pause=function(t){function e(){debug("paused"),i.readyState="paused",t()}var i=this;if(this.readyState="pausing",this.polling||!this.writable){var o=0;this.polling&&(debug("we are currently polling - waiting to pause"),o++,this.once("pollComplete",function(){debug("pre-pause polling complete"),--o||e()})),this.writable||(debug("we are currently writing - waiting to pause"),o++,this.once("drain",function(){debug("pre-pause writing complete"),--o||e()}))}else e()},Polling.prototype.poll=function(){debug("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},Polling.prototype.onData=function(t){var e=this;debug("polling got data %s",t);var i=function(t,i,o){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)};parser.decodePayload(t,this.socket.binaryType,i),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():debug('ignoring poll - transport state "%s"',this.readyState))},Polling.prototype.doClose=function(){function t(){debug("writing close packet"),e.write([{type:"close"}])}var e=this;"open"===this.readyState?(debug("transport open - closing"),t()):(debug("transport not open - deferring close"),this.once("open",t))},Polling.prototype.write=function(t){var e=this;this.writable=!1;var i=function(){e.writable=!0,e.emit("drain")};parser.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,i)})},Polling.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",i="";return!1!==this.timestampRequests&&(t[this.timestampParam]=yeast()),this.supportsBinary||t.sid||(t.b64=1),t=parseqs.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(i=":"+this.port),t.length&&(t="?"+t),e+"://"+(this.hostname.indexOf(":")!==-1?"["+this.hostname+"]":this.hostname)+i+this.path+t};

},{"../transport":15,"component-inherit":9,"debug":10,"engine.io-parser":22,"parseqs":31,"xmlhttprequest-ssl":21,"yeast":48}],20:[function(require,module,exports){
(function (global){
function WS(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=BrowserWebSocket&&!e.forceNode,this.usingBrowserWebSocket||(WebSocket=NodeWebSocket),Transport.call(this,e)}var Transport=require("../transport"),parser=require("engine.io-parser"),parseqs=require("parseqs"),inherit=require("component-inherit"),yeast=require("yeast"),debug=require("debug")("engine.io-client:websocket"),BrowserWebSocket=global.WebSocket||global.MozWebSocket,NodeWebSocket;if("undefined"==typeof window)try{NodeWebSocket=require("ws")}catch(e){}var WebSocket=BrowserWebSocket;WebSocket||"undefined"!=typeof window||(WebSocket=NodeWebSocket),module.exports=WS,inherit(WS,Transport),WS.prototype.name="websocket",WS.prototype.supportsBinary=!0,WS.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t={agent:this.agent,perMessageDeflate:this.perMessageDeflate};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(t.headers=this.extraHeaders),this.localAddress&&(t.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?new WebSocket(e):new WebSocket(e,void 0,t)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},WS.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},WS.prototype.write=function(e){function t(){s.emit("flush"),setTimeout(function(){s.writable=!0,s.emit("drain")},0)}var s=this;this.writable=!1;for(var r=e.length,o=0,i=r;o<i;o++)!function(e){parser.encodePacket(e,s.supportsBinary,function(o){if(!s.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),s.perMessageDeflate){("string"==typeof o?global.Buffer.byteLength(o):o.length)<s.perMessageDeflate.threshold&&(i.compress=!1)}}try{s.usingBrowserWebSocket?s.ws.send(o):s.ws.send(o,i)}catch(e){debug("websocket closed before onclose event")}--r||t()})}(e[o])},WS.prototype.onClose=function(){Transport.prototype.onClose.call(this)},WS.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},WS.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",s="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(s=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=yeast()),this.supportsBinary||(e.b64=1),e=parseqs.encode(e),e.length&&(e="?"+e),t+"://"+(this.hostname.indexOf(":")!==-1?"["+this.hostname+"]":this.hostname)+s+this.path+e},WS.prototype.check=function(){return!(!WebSocket||"__initialize"in WebSocket&&this.name===WS.prototype.name)};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../transport":15,"component-inherit":9,"debug":10,"engine.io-parser":22,"parseqs":31,"ws":6,"yeast":48}],21:[function(require,module,exports){
(function (global){
var hasCORS=require("has-cors");module.exports=function(e){var t=e.xdomain,n=e.xscheme,r=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||hasCORS))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&r)return new XDomainRequest}catch(e){}if(!t)try{return new(global[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"has-cors":25}],22:[function(require,module,exports){
(function (global){
function encodeBase64Object(e,r){return r("b"+exports.packets[e.type]+e.data.data)}function encodeArrayBuffer(e,r,t){if(!r)return exports.encodeBase64Packet(e,t);var n=e.data,a=new Uint8Array(n),o=new Uint8Array(1+n.byteLength);o[0]=packets[e.type];for(var f=0;f<a.length;f++)o[f+1]=a[f];return t(o.buffer)}function encodeBlobAsArrayBuffer(e,r,t){if(!r)return exports.encodeBase64Packet(e,t);var n=new FileReader;return n.onload=function(){e.data=n.result,exports.encodePacket(e,r,!0,t)},n.readAsArrayBuffer(e.data)}function encodeBlob(e,r,t){if(!r)return exports.encodeBase64Packet(e,t);if(dontSendBlobs)return encodeBlobAsArrayBuffer(e,r,t);var n=new Uint8Array(1);return n[0]=packets[e.type],t(new Blob([n.buffer,e.data]))}function tryDecode(e){try{e=utf8.decode(e)}catch(e){return!1}return e}function map(e,r,t){for(var n=new Array(e.length),a=after(e.length,t),o=0;o<e.length;o++)!function(e,t,a){r(t,function(r,t){n[e]=t,a(r,n)})}(o,e[o],a)}var keys=require("./keys"),hasBinary=require("has-binary"),sliceBuffer=require("arraybuffer.slice"),after=require("after"),utf8=require("wtf-8"),base64encoder;global&&global.ArrayBuffer&&(base64encoder=require("base64-arraybuffer"));var isAndroid="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),isPhantomJS="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),dontSendBlobs=isAndroid||isPhantomJS;exports.protocol=3;var packets=exports.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},packetslist=keys(packets),err={type:"error",data:"parser error"},Blob=require("blob");exports.encodePacket=function(e,r,t,n){"function"==typeof r&&(n=r,r=!1),"function"==typeof t&&(n=t,t=null);var a=void 0===e.data?void 0:e.data.buffer||e.data;if(global.ArrayBuffer&&a instanceof ArrayBuffer)return encodeArrayBuffer(e,r,n);if(Blob&&a instanceof global.Blob)return encodeBlob(e,r,n);if(a&&a.base64)return encodeBase64Object(e,n);var o=packets[e.type];return void 0!==e.data&&(o+=t?utf8.encode(String(e.data)):String(e.data)),n(""+o)},exports.encodeBase64Packet=function(e,r){var t="b"+exports.packets[e.type];if(Blob&&e.data instanceof global.Blob){var n=new FileReader;return n.onload=function(){r(t+n.result.split(",")[1])},n.readAsDataURL(e.data)}var a;try{a=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(r){for(var o=new Uint8Array(e.data),f=new Array(o.length),i=0;i<o.length;i++)f[i]=o[i];a=String.fromCharCode.apply(null,f)}return t+=global.btoa(a),r(t)},exports.decodePacket=function(e,r,t){if(void 0===e)return err;if("string"==typeof e){if("b"==e.charAt(0))return exports.decodeBase64Packet(e.substr(1),r);if(t&&(e=tryDecode(e))===!1)return err;var n=e.charAt(0);return Number(n)==n&&packetslist[n]?e.length>1?{type:packetslist[n],data:e.substring(1)}:{type:packetslist[n]}:err}var a=new Uint8Array(e),n=a[0],o=sliceBuffer(e,1);return Blob&&"blob"===r&&(o=new Blob([o])),{type:packetslist[n],data:o}},exports.decodeBase64Packet=function(e,r){var t=packetslist[e.charAt(0)];if(!base64encoder)return{type:t,data:{base64:!0,data:e.substr(1)}};var n=base64encoder.decode(e.substr(1));return"blob"===r&&Blob&&(n=new Blob([n])),{type:t,data:n}},exports.encodePayload=function(e,r,t){function n(e){return e.length+":"+e}function a(e,t){exports.encodePacket(e,!!o&&r,!0,function(e){t(null,n(e))})}"function"==typeof r&&(t=r,r=null);var o=hasBinary(e);return r&&o?Blob&&!dontSendBlobs?exports.encodePayloadAsBlob(e,t):exports.encodePayloadAsArrayBuffer(e,t):e.length?void map(e,a,function(e,r){return t(r.join(""))}):t("0:")},exports.decodePayload=function(e,r,t){if("string"!=typeof e)return exports.decodePayloadAsBinary(e,r,t);"function"==typeof r&&(t=r,r=null);var n;if(""==e)return t(err,0,1);for(var a,o,f="",i=0,u=e.length;i<u;i++){var c=e.charAt(i);if(":"!=c)f+=c;else{if(""==f||f!=(a=Number(f)))return t(err,0,1);if(o=e.substr(i+1,a),f!=o.length)return t(err,0,1);if(o.length){if(n=exports.decodePacket(o,r,!0),err.type==n.type&&err.data==n.data)return t(err,0,1);if(!1===t(n,i+a,u))return}i+=a,f=""}}return""!=f?t(err,0,1):void 0},exports.encodePayloadAsArrayBuffer=function(e,r){function t(e,r){exports.encodePacket(e,!0,!0,function(e){return r(null,e)})}if(!e.length)return r(new ArrayBuffer(0));map(e,t,function(e,t){var n=t.reduce(function(e,r){var t;return t="string"==typeof r?r.length:r.byteLength,e+t.toString().length+t+2},0),a=new Uint8Array(n),o=0;return t.forEach(function(e){var r="string"==typeof e,t=e;if(r){for(var n=new Uint8Array(e.length),f=0;f<e.length;f++)n[f]=e.charCodeAt(f);t=n.buffer}a[o++]=r?0:1;for(var i=t.byteLength.toString(),f=0;f<i.length;f++)a[o++]=parseInt(i[f]);a[o++]=255;for(var n=new Uint8Array(t),f=0;f<n.length;f++)a[o++]=n[f]}),r(a.buffer)})},exports.encodePayloadAsBlob=function(e,r){function t(e,r){exports.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var n=new Uint8Array(e.length),a=0;a<e.length;a++)n[a]=e.charCodeAt(a);e=n.buffer,t[0]=0}for(var o=e instanceof ArrayBuffer?e.byteLength:e.size,f=o.toString(),i=new Uint8Array(f.length+1),a=0;a<f.length;a++)i[a]=parseInt(f[a]);if(i[f.length]=255,Blob){r(null,new Blob([t.buffer,i.buffer,e]))}})}map(e,t,function(e,t){return r(new Blob(t))})},exports.decodePayloadAsBinary=function(e,r,t){"function"==typeof r&&(t=r,r=null);for(var n=e,a=[],o=!1;n.byteLength>0;){for(var f=new Uint8Array(n),i=0===f[0],u="",c=1;255!=f[c];c++){if(u.length>310){o=!0;break}u+=f[c]}if(o)return t(err,0,1);n=sliceBuffer(n,2+u.length),u=parseInt(u);var s=sliceBuffer(n,0,u);if(i)try{s=String.fromCharCode.apply(null,new Uint8Array(s))}catch(e){var l=new Uint8Array(s);s="";for(var c=0;c<l.length;c++)s+=String.fromCharCode(l[c])}a.push(s),n=sliceBuffer(n,u)}var d=a.length;a.forEach(function(e,n){t(exports.decodePacket(e,r,!0),n,d)})};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./keys":23,"after":1,"arraybuffer.slice":2,"base64-arraybuffer":4,"blob":5,"has-binary":24,"wtf-8":47}],23:[function(require,module,exports){
module.exports=Object.keys||function(r){var e=[],t=Object.prototype.hasOwnProperty;for(var o in r)t.call(r,o)&&e.push(o);return e};

},{}],24:[function(require,module,exports){
(function (global){
function hasBinary(r){function e(r){if(!r)return!1;if(global.Buffer&&global.Buffer.isBuffer&&global.Buffer.isBuffer(r)||global.ArrayBuffer&&r instanceof ArrayBuffer||global.Blob&&r instanceof Blob||global.File&&r instanceof File)return!0;if(isArray(r)){for(var f=0;f<r.length;f++)if(e(r[f]))return!0}else if(r&&"object"==typeof r){r.toJSON&&"function"==typeof r.toJSON&&(r=r.toJSON());for(var o in r)if(Object.prototype.hasOwnProperty.call(r,o)&&e(r[o]))return!0}return!1}return e(r)}var isArray=require("isarray");module.exports=hasBinary;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"isarray":27}],25:[function(require,module,exports){
try{module.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){module.exports=!1}

},{}],26:[function(require,module,exports){
var indexOf=[].indexOf;module.exports=function(e,n){if(indexOf)return e.indexOf(n);for(var r=0;r<e.length;++r)if(e[r]===n)return r;return-1};

},{}],27:[function(require,module,exports){
module.exports=Array.isArray||function(r){return"[object Array]"==Object.prototype.toString.call(r)};

},{}],28:[function(require,module,exports){
(function (global){
(function(){function t(e,n){function c(t){if(c[t]!==b)return c[t];var e;if("bug-string-char-index"==t)e="a"!="a"[0];else if("json"==t)e=c("json-stringify")&&c("json-parse");else{var r,o='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var l=n.stringify,u="function"==typeof l&&v;if(u){(r=function(){return 1}).toJSON=r;try{u="0"===l(0)&&"0"===l(new i)&&'""'==l(new a)&&l(d)===b&&l(b)===b&&l()===b&&"1"===l(r)&&"[1]"==l([r])&&"[null]"==l([b])&&"null"==l(null)&&"[null,null,null]"==l([b,d,null])&&l({a:[r,!0,!1,null,"\0\b\n\f\r\t"]})==o&&"1"===l(null,r)&&"[\n 1,\n 2\n]"==l([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==l(new f(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==l(new f(864e13))&&'"-000001-01-01T00:00:00.000Z"'==l(new f(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==l(new f(-1))}catch(t){u=!1}}e=u}if("json-parse"==t){var s=n.parse;if("function"==typeof s)try{if(0===s("0")&&!s(!1)){r=s(o);var h=5==r.a.length&&1===r.a[0];if(h){try{h=!s('"\t"')}catch(t){}if(h)try{h=1!==s("01")}catch(t){}if(h)try{h=1!==s("1.")}catch(t){}}}}catch(t){h=!1}e=h}}return c[t]=!!e}e||(e=o.Object()),n||(n=o.Object());var i=e.Number||o.Number,a=e.String||o.String,l=e.Object||o.Object,f=e.Date||o.Date,u=e.SyntaxError||o.SyntaxError,s=e.TypeError||o.TypeError,h=e.Math||o.Math,p=e.JSON||o.JSON;"object"==typeof p&&p&&(n.stringify=p.stringify,n.parse=p.parse);var g,y,b,j=l.prototype,d=j.toString,v=new f(-0xc782b5b800cec);try{v=v.getUTCFullYear()==-109252&&0===v.getUTCMonth()&&1===v.getUTCDate()&&10==v.getUTCHours()&&37==v.getUTCMinutes()&&6==v.getUTCSeconds()&&708==v.getUTCMilliseconds()}catch(t){}if(!c("json")){var C=c("bug-string-char-index");if(!v)var S=h.floor,O=[0,31,59,90,120,151,181,212,243,273,304,334],A=function(t,e){return O[e]+365*(t-1970)+S((t-1969+(e=+(e>1)))/4)-S((t-1901+e)/100)+S((t-1601+e)/400)};if((g=j.hasOwnProperty)||(g=function(t){var e,r={};return(r.__proto__=null,r.__proto__={toString:1},r).toString!=d?g=function(t){var e=this.__proto__,r=t in(this.__proto__=null,this);return this.__proto__=e,r}:(e=r.constructor,g=function(t){var r=(this.constructor||e).prototype;return t in this&&!(t in r&&this[t]===r[t])}),r=null,g.call(this,t)}),y=function(t,e){var n,o,c,i=0;(n=function(){this.valueOf=0}).prototype.valueOf=0,o=new n;for(c in o)g.call(o,c)&&i++;return n=o=null,i?y=2==i?function(t,e){var r,n={},o="[object Function]"==d.call(t);for(r in t)o&&"prototype"==r||g.call(n,r)||!(n[r]=1)||!g.call(t,r)||e(r)}:function(t,e){var r,n,o="[object Function]"==d.call(t);for(r in t)o&&"prototype"==r||!g.call(t,r)||(n="constructor"===r)||e(r);(n||g.call(t,r="constructor"))&&e(r)}:(o=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],y=function(t,e){var n,c,i="[object Function]"==d.call(t),a=!i&&"function"!=typeof t.constructor&&r[typeof t.hasOwnProperty]&&t.hasOwnProperty||g;for(n in t)i&&"prototype"==n||!a.call(t,n)||e(n);for(c=o.length;n=o[--c];a.call(t,n)&&e(n));}),y(t,e)},!c("json-stringify")){var w={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},T=function(t,e){return("000000"+(e||0)).slice(-t)},_=function(t){for(var e='"',r=0,n=t.length,o=!C||n>10,c=o&&(C?t.split(""):t);r<n;r++){var i=t.charCodeAt(r);switch(i){case 8:case 9:case 10:case 12:case 13:case 34:case 92:e+=w[i];break;default:if(i<32){e+="\\u00"+T(2,i.toString(16));break}e+=o?c[r]:t.charAt(r)}}return e+'"'},N=function(t,e,r,n,o,c,i){var a,l,f,u,h,p,j,v,C,O,w,U,J,m,x,M;try{a=e[t]}catch(t){}if("object"==typeof a&&a)if("[object Date]"!=(l=d.call(a))||g.call(a,"toJSON"))"function"==typeof a.toJSON&&("[object Number]"!=l&&"[object String]"!=l&&"[object Array]"!=l||g.call(a,"toJSON"))&&(a=a.toJSON(t));else if(a>-1/0&&a<1/0){if(A){for(h=S(a/864e5),f=S(h/365.2425)+1970-1;A(f+1,0)<=h;f++);for(u=S((h-A(f,0))/30.42);A(f,u+1)<=h;u++);h=1+h-A(f,u),p=(a%864e5+864e5)%864e5,j=S(p/36e5)%24,v=S(p/6e4)%60,C=S(p/1e3)%60,O=p%1e3}else f=a.getUTCFullYear(),u=a.getUTCMonth(),h=a.getUTCDate(),j=a.getUTCHours(),v=a.getUTCMinutes(),C=a.getUTCSeconds(),O=a.getUTCMilliseconds();a=(f<=0||f>=1e4?(f<0?"-":"+")+T(6,f<0?-f:f):T(4,f))+"-"+T(2,u+1)+"-"+T(2,h)+"T"+T(2,j)+":"+T(2,v)+":"+T(2,C)+"."+T(3,O)+"Z"}else a=null;if(r&&(a=r.call(e,t,a)),null===a)return"null";if("[object Boolean]"==(l=d.call(a)))return""+a;if("[object Number]"==l)return a>-1/0&&a<1/0?""+a:"null";if("[object String]"==l)return _(""+a);if("object"==typeof a){for(m=i.length;m--;)if(i[m]===a)throw s();if(i.push(a),w=[],x=c,c+=o,"[object Array]"==l){for(J=0,m=a.length;J<m;J++)U=N(J,a,r,n,o,c,i),w.push(U===b?"null":U);M=w.length?o?"[\n"+c+w.join(",\n"+c)+"\n"+x+"]":"["+w.join(",")+"]":"[]"}else y(n||a,function(t){var e=N(t,a,r,n,o,c,i);e!==b&&w.push(_(t)+":"+(o?" ":"")+e)}),M=w.length?o?"{\n"+c+w.join(",\n"+c)+"\n"+x+"}":"{"+w.join(",")+"}":"{}";return i.pop(),M}};n.stringify=function(t,e,n){var o,c,i,a;if(r[typeof e]&&e)if("[object Function]"==(a=d.call(e)))c=e;else if("[object Array]"==a){i={};for(var l,f=0,u=e.length;f<u;l=e[f++],("[object String]"==(a=d.call(l))||"[object Number]"==a)&&(i[l]=1));}if(n)if("[object Number]"==(a=d.call(n))){if((n-=n%1)>0)for(o="",n>10&&(n=10);o.length<n;o+=" ");}else"[object String]"==a&&(o=n.length<=10?n:n.slice(0,10));return N("",(l={},l[""]=t,l),c,i,o,"",[])}}if(!c("json-parse")){var U,J,m=a.fromCharCode,x={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},M=function(){throw U=J=null,u()},F=function(){for(var t,e,r,n,o,c=J,i=c.length;U<i;)switch(o=c.charCodeAt(U)){case 9:case 10:case 13:case 32:U++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=C?c.charAt(U):c[U],U++,t;case 34:for(t="@",U++;U<i;)if((o=c.charCodeAt(U))<32)M();else if(92==o)switch(o=c.charCodeAt(++U)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=x[o],U++;break;case 117:for(e=++U,r=U+4;U<r;U++)(o=c.charCodeAt(U))>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70||M();t+=m("0x"+c.slice(e,U));break;default:M()}else{if(34==o)break;for(o=c.charCodeAt(U),e=U;o>=32&&92!=o&&34!=o;)o=c.charCodeAt(++U);t+=c.slice(e,U)}if(34==c.charCodeAt(U))return U++,t;M();default:if(e=U,45==o&&(n=!0,o=c.charCodeAt(++U)),o>=48&&o<=57){for(48==o&&(o=c.charCodeAt(U+1))>=48&&o<=57&&M(),n=!1;U<i&&(o=c.charCodeAt(U))>=48&&o<=57;U++);if(46==c.charCodeAt(U)){for(r=++U;r<i&&(o=c.charCodeAt(r))>=48&&o<=57;r++);r==U&&M(),U=r}if(101==(o=c.charCodeAt(U))||69==o){for(o=c.charCodeAt(++U),43!=o&&45!=o||U++,r=U;r<i&&(o=c.charCodeAt(r))>=48&&o<=57;r++);r==U&&M(),U=r}return+c.slice(e,U)}if(n&&M(),"true"==c.slice(U,U+4))return U+=4,!0;if("false"==c.slice(U,U+5))return U+=5,!1;if("null"==c.slice(U,U+4))return U+=4,null;M()}return"$"},k=function(t){var e,r;if("$"==t&&M(),"string"==typeof t){if("@"==(C?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];"]"!=(t=F());r||(r=!0))r&&(","==t?"]"==(t=F())&&M():M()),","==t&&M(),e.push(k(t));return e}if("{"==t){for(e={};"}"!=(t=F());r||(r=!0))r&&(","==t?"}"==(t=F())&&M():M()),","!=t&&"string"==typeof t&&"@"==(C?t.charAt(0):t[0])&&":"==F()||M(),e[t.slice(1)]=k(F());return e}M()}return t},D=function(t,e,r){var n=E(t,e,r);n===b?delete t[e]:t[e]=n},E=function(t,e,r){var n,o=t[e];if("object"==typeof o&&o)if("[object Array]"==d.call(o))for(n=o.length;n--;)D(o,n,r);else y(o,function(t){D(o,t,r)});return r.call(t,e,o)};n.parse=function(t,e){var r,n;return U=0,J=""+t,r=k(F()),"$"!=F()&&M(),U=J=null,e&&"[object Function]"==d.call(e)?E((n={},n[""]=r,n),"",e):r}}}return n.runInContext=t,n}var e="function"==typeof define&&define.amd,r={function:!0,object:!0},n=r[typeof exports]&&exports&&!exports.nodeType&&exports,o=r[typeof window]&&window||this,c=n&&r[typeof module]&&module&&!module.nodeType&&"object"==typeof global&&global;if(!c||c.global!==c&&c.window!==c&&c.self!==c||(o=c),n&&!e)t(o,n);else{var i=o.JSON,a=o.JSON3,l=!1,f=t(o,o.JSON3={noConflict:function(){return l||(l=!0,o.JSON=i,o.JSON3=a,i=a=null),f}});o.JSON={parse:f.parse,stringify:f.stringify}}e&&define(function(){return f})}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],29:[function(require,module,exports){
function parse(e){if(e=String(e),!(e.length>1e4)){var r=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(r){var a=parseFloat(r[1]);switch((r[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*y;case"days":case"day":case"d":return a*d;case"hours":case"hour":case"hrs":case"hr":case"h":return a*h;case"minutes":case"minute":case"mins":case"min":case"m":return a*m;case"seconds":case"second":case"secs":case"sec":case"s":return a*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}function fmtShort(e){return e>=d?Math.round(e/d)+"d":e>=h?Math.round(e/h)+"h":e>=m?Math.round(e/m)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function fmtLong(e){return plural(e,d,"day")||plural(e,h,"hour")||plural(e,m,"minute")||plural(e,s,"second")||e+" ms"}function plural(s,e,r){if(!(s<e))return s<1.5*e?Math.floor(s/e)+" "+r:Math.ceil(s/e)+" "+r+"s"}var s=1e3,m=60*s,h=60*m,d=24*h,y=365.25*d;module.exports=function(s,e){e=e||{};var r=typeof s;if("string"===r&&s.length>0)return parse(s);if("number"===r&&isNaN(s)===!1)return e.long?fmtLong(s):fmtShort(s);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(s))};

},{}],30:[function(require,module,exports){
(function (global){
var rvalidchars=/^[\],:{}\s]*$/,rvalidescape=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,rvalidtokens=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,rvalidbraces=/(?:^|:|,)(?:\s*\[)+/g,rtrimLeft=/^\s+/,rtrimRight=/\s+$/;module.exports=function(r){return"string"==typeof r&&r?(r=r.replace(rtrimLeft,"").replace(rtrimRight,""),global.JSON&&JSON.parse?JSON.parse(r):rvalidchars.test(r.replace(rvalidescape,"@").replace(rvalidtokens,"]").replace(rvalidbraces,""))?new Function("return "+r)():void 0):null};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],31:[function(require,module,exports){
exports.encode=function(e){var n="";for(var o in e)e.hasOwnProperty(o)&&(n.length&&(n+="&"),n+=encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return n},exports.decode=function(e){for(var n={},o=e.split("&"),t=0,r=o.length;t<r;t++){var d=o[t].split("=");n[decodeURIComponent(d[0])]=decodeURIComponent(d[1])}return n};

},{}],32:[function(require,module,exports){
var re=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,parts=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];module.exports=function(r){var e=r,t=r.indexOf("["),s=r.indexOf("]");t!=-1&&s!=-1&&(r=r.substring(0,t)+r.substring(t,s).replace(/:/g,";")+r.substring(s,r.length));for(var o=re.exec(r||""),a={},u=14;u--;)a[parts[u]]=o[u]||"";return t!=-1&&s!=-1&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a};

},{}],33:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)t[u-1]=arguments[u];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],34:[function(require,module,exports){
function lookup(e,r){"object"==typeof e&&(r=e,e=void 0),r=r||{};var o,n=url(e),c=n.source,t=n.id,a=n.path,u=cache[t]&&a in cache[t].nsps,p=r.forceNew||r["force new connection"]||!1===r.multiplex||u;return p?(debug("ignoring socket cache for %s",c),o=Manager(c,r)):(cache[t]||(debug("new io instance for %s",c),cache[t]=Manager(c,r)),o=cache[t]),n.query&&!r.query?r.query=n.query:r&&"object"==typeof r.query&&(r.query=encodeQueryString(r.query)),o.socket(n.path,r)}function encodeQueryString(e){var r=[];for(var o in e)e.hasOwnProperty(o)&&r.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return r.join("&")}var url=require("./url"),parser=require("socket.io-parser"),Manager=require("./manager"),debug=require("debug")("socket.io-client");module.exports=exports=lookup;var cache=exports.managers={};exports.protocol=parser.protocol,exports.connect=lookup,exports.Manager=require("./manager"),exports.Socket=require("./socket");

},{"./manager":35,"./socket":37,"./url":38,"debug":10,"socket.io-parser":40}],35:[function(require,module,exports){
function Manager(t,e){if(!(this instanceof Manager))return new Manager(t,e);t&&"object"==typeof t&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[],this.encoder=new parser.Encoder,this.decoder=new parser.Decoder,this.autoConnect=e.autoConnect!==!1,this.autoConnect&&this.open()}var eio=require("engine.io-client"),Socket=require("./socket"),Emitter=require("component-emitter"),parser=require("socket.io-parser"),on=require("./on"),bind=require("component-bind"),debug=require("debug")("socket.io-client:manager"),indexOf=require("indexof"),Backoff=require("backo2"),has=Object.prototype.hasOwnProperty;module.exports=Manager,Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)has.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},Manager.prototype.updateSocketIds=function(){for(var t in this.nsps)has.call(this.nsps,t)&&(this.nsps[t].id=this.engine.id)},Emitter(Manager.prototype),Manager.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},Manager.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},Manager.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},Manager.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},Manager.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},Manager.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},Manager.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},Manager.prototype.open=Manager.prototype.connect=function(t,e){if(debug("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;debug("opening %s",this.uri),this.engine=eio(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=on(n,"open",function(){o.onopen(),t&&t()}),s=on(n,"error",function(e){if(debug("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var r=this._timeout;debug("connect attempt will timeout after %d",r);var c=setTimeout(function(){debug("connect attempt timed out after %d",r),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",r)},r);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(i),this.subs.push(s),this},Manager.prototype.onopen=function(){debug("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(on(t,"data",bind(this,"ondata"))),this.subs.push(on(t,"ping",bind(this,"onping"))),this.subs.push(on(t,"pong",bind(this,"onpong"))),this.subs.push(on(t,"error",bind(this,"onerror"))),this.subs.push(on(t,"close",bind(this,"onclose"))),this.subs.push(on(this.decoder,"decoded",bind(this,"ondecoded")))},Manager.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},Manager.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},Manager.prototype.ondata=function(t){this.decoder.add(t)},Manager.prototype.ondecoded=function(t){this.emit("packet",t)},Manager.prototype.onerror=function(t){debug("error",t),this.emitAll("error",t)},Manager.prototype.socket=function(t,e){function n(){~indexOf(i.connecting,o)||i.connecting.push(o)}var o=this.nsps[t];if(!o){o=new Socket(this,t,e),this.nsps[t]=o;var i=this;o.on("connecting",n),o.on("connect",function(){o.id=i.engine.id}),this.autoConnect&&n()}return o},Manager.prototype.destroy=function(t){var e=indexOf(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},Manager.prototype.packet=function(t){debug("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var o=0;o<n.length;o++)e.engine.write(n[o],t.options);e.encoding=!1,e.processPacketQueue()}))},Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},Manager.prototype.cleanup=function(){debug("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},Manager.prototype.close=Manager.prototype.disconnect=function(){debug("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},Manager.prototype.onclose=function(t){debug("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)debug("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();debug("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(debug("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(debug("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(debug("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},Manager.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)};

},{"./on":36,"./socket":37,"backo2":3,"component-bind":7,"component-emitter":8,"debug":10,"engine.io-client":12,"indexof":26,"socket.io-parser":40}],36:[function(require,module,exports){
function on(n,o,e){return n.on(o,e),{destroy:function(){n.removeListener(o,e)}}}module.exports=on;

},{}],37:[function(require,module,exports){
function Socket(t,e,s){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,s&&s.query&&(this.query=s.query),this.io.autoConnect&&this.open()}var parser=require("socket.io-parser"),Emitter=require("component-emitter"),toArray=require("to-array"),on=require("./on"),bind=require("component-bind"),debug=require("debug")("socket.io-client:socket"),hasBin=require("has-binary");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},emit=Emitter.prototype.emit;Emitter(Socket.prototype),Socket.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[on(t,"open",bind(this,"onopen")),on(t,"packet",bind(this,"onpacket")),on(t,"close",bind(this,"onclose"))]}},Socket.prototype.open=Socket.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},Socket.prototype.send=function(){var t=toArray(arguments);return t.unshift("message"),this.emit.apply(this,t),this},Socket.prototype.emit=function(t){if(events.hasOwnProperty(t))return emit.apply(this,arguments),this;var e=toArray(arguments),s=parser.EVENT;hasBin(e)&&(s=parser.BINARY_EVENT);var i={type:s,data:e};return i.options={},i.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(debug("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),i.id=this.ids++),this.connected?this.packet(i):this.sendBuffer.push(i),delete this.flags,this},Socket.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},Socket.prototype.onopen=function(){debug("transport is open - connecting"),"/"!==this.nsp&&(this.query?this.packet({type:parser.CONNECT,query:this.query}):this.packet({type:parser.CONNECT}))},Socket.prototype.onclose=function(t){debug("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},Socket.prototype.onpacket=function(t){if(t.nsp===this.nsp)switch(t.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(t);break;case parser.BINARY_EVENT:this.onevent(t);break;case parser.ACK:this.onack(t);break;case parser.BINARY_ACK:this.onack(t);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit("error",t.data)}},Socket.prototype.onevent=function(t){var e=t.data||[];debug("emitting event %j",e),null!=t.id&&(debug("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?emit.apply(this,e):this.receiveBuffer.push(e)},Socket.prototype.ack=function(t){var e=this,s=!1;return function(){if(!s){s=!0;var i=toArray(arguments);debug("sending ack %j",i);var o=hasBin(i)?parser.BINARY_ACK:parser.ACK;e.packet({type:o,id:t,data:i})}}},Socket.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(debug("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):debug("bad ack %s",t.id)},Socket.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},Socket.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)emit.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},Socket.prototype.ondisconnect=function(){debug("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},Socket.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},Socket.prototype.close=Socket.prototype.disconnect=function(){return this.connected&&(debug("performing disconnect (%s)",this.nsp),this.packet({type:parser.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},Socket.prototype.compress=function(t){return this.flags=this.flags||{},this.flags.compress=t,this};

},{"./on":36,"component-bind":7,"component-emitter":8,"debug":10,"has-binary":24,"socket.io-parser":40,"to-array":46}],38:[function(require,module,exports){
(function (global){
function url(o,t){var r=o;t=t||global.location,null==o&&(o=t.protocol+"//"+t.host),"string"==typeof o&&("/"===o.charAt(0)&&(o="/"===o.charAt(1)?t.protocol+o:t.host+o),/^(https?|wss?):\/\//.test(o)||(debug("protocol-less url %s",o),o=void 0!==t?t.protocol+"//"+o:"https://"+o),debug("parse %s",o),r=parseuri(o)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";var p=r.host.indexOf(":")!==-1,s=p?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+s+":"+r.port,r.href=r.protocol+"://"+s+(t&&t.port===r.port?"":":"+r.port),r}var parseuri=require("parseuri"),debug=require("debug")("socket.io-client:url");module.exports=url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"debug":10,"parseuri":32}],39:[function(require,module,exports){
(function (global){
var isArray=require("isarray"),isBuf=require("./is-buffer");exports.deconstructPacket=function(r){function e(r){if(!r)return r;if(isBuf(r)){var n={_placeholder:!0,num:t.length};return t.push(r),n}if(isArray(r)){for(var a=new Array(r.length),i=0;i<r.length;i++)a[i]=e(r[i]);return a}if("object"==typeof r&&!(r instanceof Date)){var a={};for(var f in r)a[f]=e(r[f]);return a}return r}var t=[],n=r.data,a=r;return a.data=e(n),a.attachments=t.length,{packet:a,buffers:t}},exports.reconstructPacket=function(r,e){function t(r){if(r&&r._placeholder){return e[r.num]}if(isArray(r)){for(var n=0;n<r.length;n++)r[n]=t(r[n]);return r}if(r&&"object"==typeof r){for(var a in r)r[a]=t(r[a]);return r}return r}return r.data=t(r.data),r.attachments=void 0,r},exports.removeBlobs=function(r,e){function t(r,i,f){if(!r)return r;if(global.Blob&&r instanceof Blob||global.File&&r instanceof File){n++;var o=new FileReader;o.onload=function(){f?f[i]=this.result:a=this.result,--n||e(a)},o.readAsArrayBuffer(r)}else if(isArray(r))for(var u=0;u<r.length;u++)t(r[u],u,r);else if(r&&"object"==typeof r&&!isBuf(r))for(var s in r)t(r[s],s,r)}var n=0,a=r;t(a),n||e(a)};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./is-buffer":41,"isarray":27}],40:[function(require,module,exports){
function Encoder(){}function encodeAsString(r){var e="",t=!1;return e+=r.type,exports.BINARY_EVENT!=r.type&&exports.BINARY_ACK!=r.type||(e+=r.attachments,e+="-"),r.nsp&&"/"!=r.nsp&&(t=!0,e+=r.nsp),null!=r.id&&(t&&(e+=",",t=!1),e+=r.id),null!=r.data&&(t&&(e+=","),e+=json.stringify(r.data)),debug("encoded %j as %s",r,e),e}function encodeAsBinary(r,e){function t(r){var t=binary.deconstructPacket(r),o=encodeAsString(t.packet),n=t.buffers;n.unshift(o),e(n)}binary.removeBlobs(r,t)}function Decoder(){this.reconstructor=null}function decodeString(r){var e={},t=0;if(e.type=Number(r.charAt(0)),null==exports.types[e.type])return error();if(exports.BINARY_EVENT==e.type||exports.BINARY_ACK==e.type){for(var o="";"-"!=r.charAt(++t)&&(o+=r.charAt(t),t!=r.length););if(o!=Number(o)||"-"!=r.charAt(t))throw new Error("Illegal attachments");e.attachments=Number(o)}if("/"==r.charAt(t+1))for(e.nsp="";++t;){var n=r.charAt(t);if(","==n)break;if(e.nsp+=n,t==r.length)break}else e.nsp="/";var s=r.charAt(t+1);if(""!==s&&Number(s)==s){for(e.id="";++t;){var n=r.charAt(t);if(null==n||Number(n)!=n){--t;break}if(e.id+=r.charAt(t),t==r.length)break}e.id=Number(e.id)}return r.charAt(++t)&&(e=tryParse(e,r.substr(t))),debug("decoded %s as %j",r,e),e}function tryParse(r,e){try{r.data=json.parse(e)}catch(r){return error()}return r}function BinaryReconstructor(r){this.reconPack=r,this.buffers=[]}function error(r){return{type:exports.ERROR,data:"parser error"}}var debug=require("debug")("socket.io-parser"),json=require("json3"),Emitter=require("component-emitter"),binary=require("./binary"),isBuf=require("./is-buffer");exports.protocol=4,exports.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],exports.CONNECT=0,exports.DISCONNECT=1,exports.EVENT=2,exports.ACK=3,exports.ERROR=4,exports.BINARY_EVENT=5,exports.BINARY_ACK=6,exports.Encoder=Encoder,exports.Decoder=Decoder,Encoder.prototype.encode=function(r,e){if(debug("encoding packet %j",r),exports.BINARY_EVENT==r.type||exports.BINARY_ACK==r.type)encodeAsBinary(r,e);else{e([encodeAsString(r)])}},Emitter(Decoder.prototype),Decoder.prototype.add=function(r){var e;if("string"==typeof r)e=decodeString(r),exports.BINARY_EVENT==e.type||exports.BINARY_ACK==e.type?(this.reconstructor=new BinaryReconstructor(e),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",e)):this.emit("decoded",e);else{if(!isBuf(r)&&!r.base64)throw new Error("Unknown type: "+r);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(e=this.reconstructor.takeBinaryData(r))&&(this.reconstructor=null,this.emit("decoded",e))}},Decoder.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},BinaryReconstructor.prototype.takeBinaryData=function(r){if(this.buffers.push(r),this.buffers.length==this.reconPack.attachments){var e=binary.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]};

},{"./binary":39,"./is-buffer":41,"component-emitter":42,"debug":43,"json3":28}],41:[function(require,module,exports){
(function (global){
function isBuf(f){return global.Buffer&&global.Buffer.isBuffer(f)||global.ArrayBuffer&&f instanceof ArrayBuffer}module.exports=isBuf;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],42:[function(require,module,exports){
function Emitter(t){if(t)return mixin(t)}function mixin(t){for(var e in Emitter.prototype)t[e]=Emitter.prototype[e];return t}module.exports=Emitter,Emitter.prototype.on=Emitter.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[t]=this._callbacks[t]||[]).push(e),this},Emitter.prototype.once=function(t,e){function i(){r.off(t,i),e.apply(this,arguments)}var r=this;return this._callbacks=this._callbacks||{},i.fn=e,this.on(t,i),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i=this._callbacks[t];if(!i)return this;if(1==arguments.length)return delete this._callbacks[t],this;for(var r,s=0;s<i.length;s++)if((r=i[s])===e||r.fn===e){i.splice(s,1);break}return this},Emitter.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),i=this._callbacks[t];if(i){i=i.slice(0);for(var r=0,s=i.length;r<s;++r)i[r].apply(this,e)}return this},Emitter.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[t]||[]},Emitter.prototype.hasListeners=function(t){return!!this.listeners(t).length};

},{}],43:[function(require,module,exports){
function useColors(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function formatArgs(){var o=arguments,e=this.useColors;if(o[0]=(e?"%c":"")+this.namespace+(e?" %c":" ")+o[0]+(e?"%c ":" ")+"+"+exports.humanize(this.diff),!e)return o;var r="color: "+this.color;o=[o[0],r,"color: inherit"].concat(Array.prototype.slice.call(o,1));var t=0,s=0;return o[0].replace(/%[a-z%]/g,function(o){"%%"!==o&&(t++,"%c"===o&&(s=t))}),o.splice(s,0,r),o}function log(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(o){try{null==o?exports.storage.removeItem("debug"):exports.storage.debug=o}catch(o){}}function load(){var o;try{o=exports.storage.debug}catch(o){}return o}function localstorage(){try{return window.localStorage}catch(o){}}exports=module.exports=require("./debug"),exports.log=log,exports.formatArgs=formatArgs,exports.save=save,exports.load=load,exports.useColors=useColors,exports.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:localstorage(),exports.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],exports.formatters.j=function(o){return JSON.stringify(o)},exports.enable(load());

},{"./debug":44}],44:[function(require,module,exports){
function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(e){function r(){}function o(){var e=o,r=+new Date,s=r-(prevTime||r);e.diff=s,e.prev=prevTime,e.curr=r,prevTime=r,null==e.useColors&&(e.useColors=exports.useColors()),null==e.color&&e.useColors&&(e.color=selectColor());var t=Array.prototype.slice.call(arguments);t[0]=exports.coerce(t[0]),"string"!=typeof t[0]&&(t=["%o"].concat(t));var n=0;t[0]=t[0].replace(/%([a-z%])/g,function(r,o){if("%%"===r)return r;n++;var s=exports.formatters[o];if("function"==typeof s){var p=t[n];r=s.call(e,p),t.splice(n,1),n--}return r}),"function"==typeof exports.formatArgs&&(t=exports.formatArgs.apply(e,t)),(o.log||exports.log||console.log.bind(console)).apply(e,t)}r.enabled=!1,o.enabled=!0;var s=exports.enabled(e)?o:r;return s.namespace=e,s}function enable(e){exports.save(e);for(var r=(e||"").split(/[\s,]+/),o=r.length,s=0;s<o;s++)r[s]&&(e=r[s].replace(/\*/g,".*?"),"-"===e[0]?exports.skips.push(new RegExp("^"+e.substr(1)+"$")):exports.names.push(new RegExp("^"+e+"$")))}function disable(){exports.enable("")}function enabled(e){var r,o;for(r=0,o=exports.skips.length;r<o;r++)if(exports.skips[r].test(e))return!1;for(r=0,o=exports.names.length;r<o;r++)if(exports.names[r].test(e))return!0;return!1}function coerce(e){return e instanceof Error?e.stack||e.message:e}exports=module.exports=debug,exports.coerce=coerce,exports.disable=disable,exports.enable=enable,exports.enabled=enabled,exports.humanize=require("ms"),exports.names=[],exports.skips=[],exports.formatters={};var prevColor=0,prevTime;

},{"ms":45}],45:[function(require,module,exports){
function parse(e){if(e=""+e,!(e.length>1e4)){var a=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(a){var r=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*y;case"days":case"day":case"d":return r*d;case"hours":case"hour":case"hrs":case"hr":case"h":return r*h;case"minutes":case"minute":case"mins":case"min":case"m":return r*m;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r}}}}function short(e){return e>=d?Math.round(e/d)+"d":e>=h?Math.round(e/h)+"h":e>=m?Math.round(e/m)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function long(e){return plural(e,d,"day")||plural(e,h,"hour")||plural(e,m,"minute")||plural(e,s,"second")||e+" ms"}function plural(s,e,a){if(!(s<e))return s<1.5*e?Math.floor(s/e)+" "+a:Math.ceil(s/e)+" "+a+"s"}var s=1e3,m=60*s,h=60*m,d=24*h,y=365.25*d;module.exports=function(s,e){return e=e||{},"string"==typeof s?parse(s):e.long?long(s):short(s)};

},{}],46:[function(require,module,exports){
function toArray(r,o){var t=[];o=o||0;for(var a=o||0;a<r.length;a++)t[a-o]=r[a];return t}module.exports=toArray;

},{}],47:[function(require,module,exports){
(function (global){
!function(r){function e(r){for(var e,n,t=[],o=0,i=r.length;o<i;)e=r.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(n=r.charCodeAt(o++),56320==(64512&n)?t.push(((1023&e)<<10)+(1023&n)+65536):(t.push(e),o--)):t.push(e);return t}function n(r){for(var e,n=r.length,t=-1,o="";++t<n;)e=r[t],e>65535&&(e-=65536,o+=s(e>>>10&1023|55296),e=56320|1023&e),o+=s(e);return o}function t(r,e){return s(r>>e&63|128)}function o(r){if(0==(4294967168&r))return s(r);var e="";return 0==(4294965248&r)?e=s(r>>6&31|192):0==(4294901760&r)?(e=s(r>>12&15|224),e+=t(r,6)):0==(4292870144&r)&&(e=s(r>>18&7|240),e+=t(r,12),e+=t(r,6)),e+=s(63&r|128)}function i(r){for(var n,t=e(r),i=t.length,f=-1,u="";++f<i;)n=t[f],u+=o(n);return u}function f(){if(p>=v)throw Error("Invalid byte index");var r=255&h[p];if(p++,128==(192&r))return 63&r;throw Error("Invalid continuation byte")}function u(){var r,e,n,t,o;if(p>v)throw Error("Invalid byte index");if(p==v)return!1;if(r=255&h[p],p++,0==(128&r))return r;if(192==(224&r)){var e=f();if((o=(31&r)<<6|e)>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&r)){if(e=f(),n=f(),(o=(15&r)<<12|e<<6|n)>=2048)return o;throw Error("Invalid continuation byte")}if(240==(248&r)&&(e=f(),n=f(),t=f(),(o=(15&r)<<18|e<<12|n<<6|t)>=65536&&o<=1114111))return o;throw Error("Invalid WTF-8 detected")}function a(r){h=e(r),v=h.length,p=0;for(var t,o=[];(t=u())!==!1;)o.push(t);return n(o)}var d="object"==typeof exports&&exports,l="object"==typeof module&&module&&module.exports==d&&module,c="object"==typeof global&&global;c.global!==c&&c.window!==c||(r=c);var h,v,p,s=String.fromCharCode,b={version:"1.0.0",encode:i,decode:a};if("function"==typeof define&&"object"==typeof define.amd&&define.amd)define(function(){return b});else if(d&&!d.nodeType)if(l)l.exports=b;else{var y={},w=y.hasOwnProperty;for(var g in b)w.call(b,g)&&(d[g]=b[g])}else r.wtf8=b}(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],48:[function(require,module,exports){
"use strict";function encode(e){var t="";do{t=alphabet[e%length]+t,e=Math.floor(e/length)}while(e>0);return t}function decode(e){var t=0;for(i=0;i<e.length;i++)t=t*length+map[e.charAt(i)];return t}function yeast(){var e=encode(+new Date);return e!==prev?(seed=0,prev=e):e+"."+encode(seed++)}for(var alphabet="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),length=64,map={},seed=0,i=0,prev;i<length;i++)map[alphabet[i]]=i;yeast.encode=encode,yeast.decode=decode,module.exports=yeast;

},{}],49:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function doPostMessage(e){postMessage(JSON.stringify(e))}var _socket2=require("socket.io-client"),_socket3=_interopRequireDefault(_socket2),socket=null,events={};onmessage=function(e){var t=JSON.parse(e.data);if("init"===t.type){var n=t.endpoint,o=t.connectionType;socket=(0,_socket3.default)(n,{transports:[o],reconnection:!1}),socket.on("connect",function(){return doPostMessage({type:"initDone"})}),socket.on("connect_error",function(e){doPostMessage({type:"initError"}),close()})}if("close"===t.type){try{setTimeout=function(){}}catch(e){}null!=socket&&socket.disconnect(!0),socket=null,close()}if("observe"===t.type){var s=function(e){doPostMessage({type:"emit",event:t.event,data:e})};events[t.id]=s,socket.on(t.event,s)}if("unobserve"===t.type){var r=events[t.id];null!=socket&&socket.removeListener(t.event,r),delete events[t.id]}if("subscribe"===t.type){var c;(c=socket).emit.apply(c,["subscribe",t.event].concat(_toConsumableArray(t.values)))}"send"===t.type&&socket.send(t.message,function(e){doPostMessage({type:"sendReply",reply:e,id:t.id})})};

},{"socket.io-client":34}]},{},[49])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
